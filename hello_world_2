export async function generatePDF({
  title,
  orientation = 'portrait',
  tabs = [],
  onTabClick,
  fileName = 'document.pdf',
}) {
  // Initialize jsPDF
  const pdf = new jsPDF({ orientation, unit: 'pt', format: 'a4' });
  const pw = pdf.internal.pageSize.getWidth();
  const ph = pdf.internal.pageSize.getHeight();
  const bg = '#262626';
  const fg = '#FFFFFF';

  // --- TITLE PAGE with required image ---
  pdf.setFillColor(bg);
  pdf.rect(0, 0, pw, ph, 'F');
  const firstPageImg = require('../../image/pdf_first_page.png'); // changed: use require()
  // Draw image to full page, fitting with margins
  await new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => {
      const ratio = img.width / img.height;
      let iw = pw - 80;
      let ih = iw / ratio;
      if (ih > ph - 80) { ih = ph - 80; iw = ih * ratio; }
      pdf.addImage(img, 'PNG', (pw - iw) / 2, (ph - ih) / 2, iw, ih);
      resolve();
    };
    img.onerror = reject;
    img.src = firstPageImg;
  });

  // --- TOC placeholder ---
  pdf.addPage();
  const toc = [];

  // --- CAPTURE TABS ---
  for (const [tabId, tabObj] of tabs) {
    const { tabTitle } = tabObj;
    await onTabClick(tabId);            // activate
    await new Promise(res => setTimeout(res, 2000)); // wait for load

    const container = document.getElementById('__tb__');
    if (!container) continue;

    pdf.addPage();
    const pageNum = pdf.getNumberOfPages();
    toc.push({ title: tabTitle, page: pageNum });

    // header
    pdf.setFillColor(bg);
    pdf.rect(0, 0, pw, ph, 'F');
    pdf.setTextColor(fg);
    pdf.setFontSize(24);
    pdf.text(tabTitle, 40, 60);

    // capture tab
    const canvas = await html2canvas(container, { backgroundColor: null, useCORS: true, scale: 2 });
    const dataURL = canvas.toDataURL('image/png');
    const iw = pw - 80;
    const ih = iw * canvas.height / canvas.width;
    pdf.addImage(dataURL, 'PNG', 40, 90, iw, ih);
  }

  // --- POPULATE TOC ---
  pdf.setPage(2);
  pdf.setFillColor(bg);
  pdf.rect(0, 0, pw, ph, 'F');
  pdf.setTextColor(fg);
  pdf.setFontSize(28);
  pdf.text('Table of Contents', pw / 2, 80, { align: 'center' });
  pdf.setFontSize(14);
  let y = 120;
  toc.forEach(e => {
    const dots = '.'.repeat(30);
    pdf.text(`${e.title} ${dots} ${e.page}`, 60, y, { maxWidth: pw - 120 });
    y += 24;
  });

  // --- PAGE NUMBERS ---
  const total = pdf.getNumberOfPages();
  pdf.setFontSize(10).setTextColor(fg);
  for (let i = 2; i <= total; i++) {
    pdf.setPage(i);
    pdf.text(`Page ${i - 1} of ${total - 1}`, pw - 60, ph - 30, { align: 'right' });
  }

  // --- SAVE PDF ---
  pdf.save(fileName);
}
