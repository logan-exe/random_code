export async function generatePDF({
  title,
  orientation = 'portrait',
  tabs = [],
  fileName = 'document.pdf',
}) {
  // Initialize PDF
  const pdf = new jsPDF({ orientation, unit: 'pt', format: 'a4' });
  const pageW = pdf.internal.pageSize.getWidth();
  const pageH = pdf.internal.pageSize.getHeight();
  const bg = '#262626';
  const fg = '#FFFFFF';

  // --- Title Page ---
  pdf.setFillColor(bg);
  pdf.rect(0, 0, pageW, pageH, 'F');
  pdf.setTextColor(fg);
  pdf.setFontSize(36);
  pdf.text(title, pageW / 2, pageH / 2, { align: 'center' });

  // --- Placeholder for Table of Contents ---
  pdf.addPage();
  const toc = [];

  // --- Iterate Tabs & Widgets ---
  for (const [tabId, tabObj] of tabs) {
    const { tabTitle, dashboardItems } = tabObj;
    pdf.addPage();
    const pageNum = pdf.getNumberOfPages();
    toc.push({ title: tabTitle, page: pageNum });

    // Section header
    pdf.setFillColor(bg);
    pdf.rect(0, 0, pageW, pageH, 'F');
    pdf.setTextColor(fg);
    pdf.setFontSize(24);
    pdf.text(tabTitle, 40, 60);
    let y = 90;

    for (const item of dashboardItems) {
      const key = item.widgetState?.key;
      const widgetTitle = item.widgetState?.title;
      const el = document.getElementById(key);
      if (!el) { console.warn(`Missing element: ${key}`); continue; }

      // Capture node as PNG via dom-to-image-more
      let dataUrl;
      try {
        dataUrl = await domToImage.toPng(el, {
          bgcolor: bg,
          width: el.scrollWidth,
          height: el.scrollHeight,
          style: { transform: 'scale(2)', transformOrigin: 'top left' }
        });
      } catch (err) {
        console.error(`Error capturing ${key}:`, err);
        continue;
      }

      // Compute image dimensions
      const img = new Image();
      img.src = dataUrl;
      await new Promise(res => img.onload = res);
      const imgW = pageW - 80;
      const imgH = (imgH = imgW * (img.height / img.width));

      // Page break if necessary
      if (y + imgH > pageH - 40) {
        pdf.addPage();
        pdf.setFillColor(bg);
        pdf.rect(0, 0, pageW, pageH, 'F');
        y = 60;
      }

      // Widget title
      if (widgetTitle) {
        pdf.setFontSize(14);
        pdf.text(widgetTitle, 40, y);
        y += 20;
      }

      // Embed image
      pdf.addImage(dataUrl, 'PNG', 40, y, imgW, imgH);
      y += imgH + 30;
    }
  }

  // --- Populate Table of Contents ---
  pdf.setPage(2);
  pdf.setFillColor(bg);
  pdf.rect(0, 0, pageW, pageH, 'F');
  pdf.setTextColor(fg);
  pdf.setFontSize(28);
  pdf.text('Table of Contents', pageW / 2, 80, { align: 'center' });
  pdf.setFontSize(14);
  let ty = 120;
  toc.forEach(entry => {
    pdf.text(entry.title, 60, ty);
    pdf.text(`${entry.page}`, pageW - 60, ty, { align: 'right' });
    ty += 24;
  });

  // --- Page Numbers ---
  const totalPages = pdf.getNumberOfPages();
  pdf.setFontSize(10).setTextColor(fg);
  for (let p = 1; p <= totalPages; p++) {
    pdf.setPage(p);
    if (p > 1) pdf.text(`Page ${p - 1} of ${totalPages - 1}`, pageW - 60, pageH - 30, { align: 'right' });
  }

  // --- Save PDF ---
  pdf.save(fileName);
}
