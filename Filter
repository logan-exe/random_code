"use client"

import { useState, useEffect, useRef } from "react"

export default function ColumnFilterApp() {
  // Generate dummy data
  const generateDummyData = () => {
    const data = []
    for (let i = 0; i < 100; i++) {
      data.push({
        id: i,
        name: `Person ${i}`,
        age: Math.floor(Math.random() * 50) + 18,
        salary: Math.floor(Math.random() * 100000) + 30000,
        department: ["HR", "Engineering", "Sales", "Marketing"][Math.floor(Math.random() * 4)],
        experience: Math.floor(Math.random() * 20),
      })
    }
    return data
  }

  // Initialize data
  const [rowData, setRowData] = useState(() => {
    const data = generateDummyData()
    return data
  })

  // Extract columns from the first row of data
  const [columns, setColumns] = useState(() => {
    const firstRow = rowData[0] || {}
    return Object.keys(firstRow).map((field) => ({
      field,
      header: field.charAt(0).toUpperCase() + field.slice(1),
    }))
  })

  // Track available columns for operations
  const [availableColumns, setAvailableColumns] = useState([])
  const [selectedColumn, setSelectedColumn] = useState("")
  const [newColumnName, setNewColumnName] = useState("")
  const [operation, setOperation] = useState("duplicate")
  const [multiplier, setMultiplier] = useState(1)
  const [prefixText, setPrefixText] = useState("prefix_")
  const [postfixText, setPostfixText] = useState("_postfix")

  // Refs for maintaining focus
  const newColumnInputRef = useRef(null)

  // Pagination
  const [currentPage, setCurrentPage] = useState(1)
  const rowsPerPage = 10
  const totalPages = Math.ceil(rowData.length / rowsPerPage)

  // Get current rows for pagination
  const getCurrentRows = () => {
    const startIndex = (currentPage - 1) * rowsPerPage
    const endIndex = startIndex + rowsPerPage
    return rowData.slice(startIndex, endIndex)
  }

  // Update available columns when column definitions change
  useEffect(() => {
    const columnFields = columns.map((col) => col.field)
    setAvailableColumns(columnFields)
    if (columnFields.length > 0 && !selectedColumn) {
      setSelectedColumn(columnFields[0])
    }
  }, [columns])

  // Drop a column
  const handleDropColumn = () => {
    if (!selectedColumn) return

    const updatedColumns = columns.filter((col) => col.field !== selectedColumn)
    setColumns(updatedColumns)

    // Update selected column if the current one is removed
    if (updatedColumns.length > 0) {
      setSelectedColumn(updatedColumns[0].field)
    } else {
      setSelectedColumn("")
    }
  }

  // Add a new column
  const handleAddColumn = () => {
    if (!selectedColumn || !newColumnName) return

    // Check if column name already exists
    if (availableColumns.includes(newColumnName)) {
      alert("Column name already exists!")
      return
    }

    // Create new column definition
    const newColumn = {
      field: newColumnName,
      header: newColumnName.charAt(0).toUpperCase() + newColumnName.slice(1),
    }

    // Update column definitions
    setColumns([...columns, newColumn])

    // Update row data with the new column
    const updatedRowData = rowData.map((row) => {
      const newRow = { ...row }

      if (operation === "duplicate") {
        newRow[newColumnName] = row[selectedColumn]
      } else if (operation === "multiply" && typeof row[selectedColumn] === "number") {
        newRow[newColumnName] = row[selectedColumn] * multiplier
      } else if (operation === "prefix" && row[selectedColumn] !== undefined) {
        // Convert to string to ensure prefix works with any data type
        newRow[newColumnName] = `${prefixText}${String(row[selectedColumn])}`
      } else if (operation === "postfix" && row[selectedColumn] !== undefined) {
        // Convert to string to ensure postfix works with any data type
        newRow[newColumnName] = `${String(row[selectedColumn])}${postfixText}`
      }

      return newRow
    })

    setRowData(updatedRowData)
    setNewColumnName("")

    // Focus back on the input after adding column
    setTimeout(() => {
      if (newColumnInputRef.current) {
        newColumnInputRef.current.focus()
      }
    }, 0)
  }

  // Custom Select component with improved dropdown visibility
  const CustomSelect = ({ value, onChange, options, label, id }) => {
    const [isOpen, setIsOpen] = useState(false)
    const selectRef = useRef(null)
    const dropdownRef = useRef(null)

    // Close dropdown when clicking outside
    useEffect(() => {
      const handleClickOutside = (event) => {
        if (selectRef.current && !selectRef.current.contains(event.target)) {
          setIsOpen(false)
        }
      }

      document.addEventListener("mousedown", handleClickOutside)
      return () => {
        document.removeEventListener("mousedown", handleClickOutside)
      }
    }, [])

    return (
      <div className="relative" ref={selectRef}>
        <label htmlFor={id} className="block text-sm font-medium text-gray-700 mb-1">
          {label}
        </label>
        <button
          id={id}
          type="button"
          className="w-full bg-white border border-gray-300 rounded-md py-2 px-3 text-left shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          onClick={() => setIsOpen(!isOpen)}
        >
          {value || "Select..."}
        </button>
        {isOpen && (
          <div
            ref={dropdownRef}
            className="fixed z-50 bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm"
            style={{
              width: selectRef.current ? selectRef.current.offsetWidth : "auto",
              top: selectRef.current ? selectRef.current.getBoundingClientRect().bottom + window.scrollY : 0,
              left: selectRef.current ? selectRef.current.getBoundingClientRect().left + window.scrollX : 0,
            }}
          >
            {options.map((option) => (
              <div
                key={option}
                className={`cursor-pointer select-none relative py-2 pl-3 pr-9 hover:bg-gray-100 ${
                  value === option ? "bg-gray-100" : ""
                }`}
                onClick={(e) => {
                  e.stopPropagation()
                  onChange(option)
                  setIsOpen(false)
                }}
              >
                {option}
              </div>
            ))}
          </div>
        )}
      </div>
    )
  }

  // Custom Button component
  const CustomButton = ({ onClick, children, variant = "primary", className = "", ...props }) => {
    const baseClasses = "px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2"
    const variantClasses = {
      primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
      destructive: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
      outline: "bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-blue-500",
    }

    return (
      <button className={`${baseClasses} ${variantClasses[variant]} ${className}`} onClick={onClick} {...props}>
        {children}
      </button>
    )
  }

  // Custom Input component with focus preservation
  const CustomInput = ({ label, id, value, onChange, inputRef, ...props }) => {
    // Use a callback ref to maintain focus
    const handleChange = (e) => {
      onChange(e)
    }

    return (
      <div>
        <label htmlFor={id} className="block text-sm font-medium text-gray-700 mb-1">
          {label}
        </label>
        <input
          id={id}
          ref={inputRef}
          value={value}
          onChange={handleChange}
          className="w-full border border-gray-300 rounded-md py-2 px-3 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          {...props}
        />
      </div>
    )
  }

  // Custom Card component
  const CustomCard = ({ title, description, children, footer }) => {
    return (
      <div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg font-medium text-gray-900">{title}</h3>
          {description && <p className="mt-1 text-sm text-gray-500">{description}</p>}
        </div>
        <div className="px-4 py-5 sm:p-6">{children}</div>
        {footer && <div className="px-4 py-4 sm:px-6 bg-gray-50">{footer}</div>}
      </div>
    )
  }

  return (
    <div className="container mx-auto p-4 bg-gray-50 min-h-screen">
      <h1 className="text-2xl font-bold mb-2 text-gray-900">Column Filter Application</h1>
      <div className="text-sm text-gray-500 mb-6">
        Total rows: <span className="font-medium">{rowData.length}</span> | Showing rows:{" "}
        <span className="font-medium">{(currentPage - 1) * rowsPerPage + 1}</span> -{" "}
        <span className="font-medium">{Math.min(currentPage * rowsPerPage, rowData.length)}</span> | Total columns:{" "}
        <span className="font-medium">{columns.length}</span>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <CustomCard
          title="Drop Column"
          description="Remove a column from the dataframe"
          footer={
            <CustomButton onClick={handleDropColumn} variant="destructive" className="w-full">
              Drop Column
            </CustomButton>
          }
        >
          <div className="space-y-4">
            <CustomSelect
              id="drop-column"
              label="Select Column"
              value={selectedColumn}
              onChange={setSelectedColumn}
              options={availableColumns}
            />
          </div>
        </CustomCard>

        <CustomCard
          title="Add Column"
          description="Add a new column based on existing data"
          className="md:col-span-2"
          footer={
            <CustomButton onClick={handleAddColumn} className="w-full">
              Add Column
            </CustomButton>
          }
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <CustomSelect
              id="source-column"
              label="Source Column"
              value={selectedColumn}
              onChange={setSelectedColumn}
              options={availableColumns}
            />

            <CustomInput
              id="new-column-name"
              label="New Column Name"
              value={newColumnName}
              onChange={(e) => setNewColumnName(e.target.value)}
              placeholder="Enter new column name"
              inputRef={newColumnInputRef}
            />

            <CustomSelect
              id="operation"
              label="Operation"
              value={operation}
              onChange={setOperation}
              options={["duplicate", "multiply", "prefix", "postfix"]}
            />

            {operation === "multiply" && (
              <CustomInput
                id="multiplier"
                label="Multiplier"
                type="number"
                value={multiplier}
                onChange={(e) => setMultiplier(Number(e.target.value))}
              />
            )}

            {operation === "prefix" && (
              <CustomInput
                id="prefix-text"
                label="Prefix Text"
                value={prefixText}
                onChange={(e) => setPrefixText(e.target.value)}
                placeholder="Enter prefix text"
              />
            )}

            {operation === "postfix" && (
              <CustomInput
                id="postfix-text"
                label="Postfix Text"
                value={postfixText}
                onChange={(e) => setPostfixText(e.target.value)}
                placeholder="Enter postfix text"
              />
            )}
          </div>
        </CustomCard>
      </div>

      <div className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {columns.map((column) => (
                  <th
                    key={column.field}
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    {column.header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {getCurrentRows().map((row, rowIndex) => (
                <tr key={rowIndex} className={rowIndex % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                  {columns.map((column) => (
                    <td
                      key={`${rowIndex}-${column.field}`}
                      className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      {row[column.field] !== undefined ? String(row[column.field]) : ""}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="flex items-center justify-between mt-4">
        <div className="text-sm text-gray-700">
          Showing <span className="font-medium">{(currentPage - 1) * rowsPerPage + 1}</span> to{" "}
          <span className="font-medium">{Math.min(currentPage * rowsPerPage, rowData.length)}</span> of{" "}
          <span className="font-medium">{rowData.length}</span> results
        </div>
        <div className="flex items-center space-x-2">
          <CustomButton
            variant="outline"
            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            disabled={currentPage === 1}
          >
            Previous
          </CustomButton>
          <span className="text-sm text-gray-700">
            Page {currentPage} of {totalPages}
          </span>
          <CustomButton
            variant="outline"
            onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
            disabled={currentPage === totalPages}
          >
            Next
          </CustomButton>
        </div>
      </div>
    </div>
  )
}
