import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

/**
 * Helper: Deep clone an element, including canvases and styles, for accurate capture.
 */
async function captureElement(el) {
  const clone = el.cloneNode(true);
  clone.style.position = 'absolute';
  clone.style.top = '-9999px';
  clone.style.left = '-9999px';
  clone.style.display = 'block';
  clone.style.visibility = 'visible';

  // Copy inline canvas content
  const origCanvases = el.querySelectorAll('canvas');
  const cloneCanvases = clone.querySelectorAll('canvas');
  cloneCanvases.forEach((c, i) => {
    const o = origCanvases[i];
    try {
      const dataURL = o.toDataURL();
      const img = new Image();
      img.src = dataURL;
      img.onload = () => {
        const ctx = c.getContext('2d');
        ctx.clearRect(0, 0, c.width, c.height);
        ctx.drawImage(img, 0, 0);
      };
    } catch (e) {
      console.warn('Canvas copy failed', e);
    }
  });

  document.body.appendChild(clone);
  try {
    const canvas = await html2canvas(clone, {
      backgroundColor: null,
      useCORS: true,
      allowTaint: false,
      windowWidth: clone.scrollWidth,
      windowHeight: clone.scrollHeight,
      scale: 2
    });
    return canvas;
  } finally {
    document.body.removeChild(clone);
  }
}

/**
 * Generate a professional PDF from specified dashboard tabs, and download each widget as an image.
 *
 * @param {Object} options
 * @param {string} options.title        - Title for the first page.
 * @param {string} options.orientation  - 'portrait' or 'landscape'.
 * @param {Array} options.tabs          - Array of [tabId, { tabTitle, dashboardItems }].
 * @param {string} [options.fileName='document.pdf'] - Output file name.
 */
export async function generatePDF({
  title,
  orientation = 'portrait',
  tabs = [],
  fileName = 'document.pdf',
}) {
  const pdf = new jsPDF({ orientation, unit: 'pt', format: 'a4' });
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const bgColor = '#262626';
  const textColor = '#FFFFFF';

  // Title page
  pdf.setFillColor(bgColor);
  pdf.rect(0, 0, pageWidth, pageHeight, 'F');
  pdf.setTextColor(textColor);
  pdf.setFontSize(36);
  pdf.text(title, pageWidth / 2, pageHeight / 2, { align: 'center' });

  // TOC placeholder
  pdf.addPage();
  const tocEntries = [];

  // Iterate through tabs
  for (const [tabId, tabObj] of tabs) {
    const { tabTitle, dashboardItems } = tabObj;
    pdf.addPage();
    const startPage = pdf.getNumberOfPages();
    tocEntries.push({ title: tabTitle, page: startPage });

    // Draw background & header
    pdf.setFillColor(bgColor);
    pdf.rect(0, 0, pageWidth, pageHeight, 'F');
    pdf.setTextColor(textColor);
    pdf.setFontSize(24);
    pdf.text(tabTitle, 40, 60);
    let yOffset = 90;

    // Render each dashboard item
    for (const item of dashboardItems) {
      const key = item.widgetState?.key;
      const widgetTitle = item.widgetState?.title;
      const el = document.getElementById(key);
      if (!el) continue;

      // Capture element to canvas
      const canvas = await captureElement(el);
      const imgData = canvas.toDataURL('image/png');

      // Trigger download of widget image
      const link = document.createElement('a');
      link.href = imgData;
      link.download = `${key}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Calculate dimensions for PDF
      const imgWidth = pageWidth - 80;
      const imgHeight = imgWidth * canvas.height / canvas.width;

      // Page break if overflow
      if (yOffset + imgHeight > pageHeight - 40) {
        pdf.addPage();
        pdf.setFillColor(bgColor);
        pdf.rect(0, 0, pageWidth, pageHeight, 'F');
        yOffset = 60;
      }

      // Add widget title
      if (widgetTitle) {
        pdf.setFontSize(14);
        pdf.text(widgetTitle, 40, yOffset);
        yOffset += 20;
      }

      // Insert widget image
      pdf.addImage(imgData, 'PNG', 40, yOffset, imgWidth, imgHeight);
      yOffset += imgHeight + 30;
    }
  }

  // Populate Table of Contents
  pdf.setPage(2);
  pdf.setFillColor(bgColor);
  pdf.rect(0, 0, pageWidth, pageHeight, 'F');
  pdf.setTextColor(textColor);
  pdf.setFontSize(28);
  pdf.text('Table of Contents', pageWidth / 2, 80, { align: 'center' });
  pdf.setFontSize(14);
  let tocY = 120;
  tocEntries.forEach(e => {
    pdf.text(e.title, 60, tocY);
    pdf.text(`${e.page}`, pageWidth - 60, tocY, { align: 'right' });
    tocY += 24;
  });

  // Add page numbers
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    if (i > 1) pdf.text(`Page ${i} of ${totalPages}`, pageWidth - 60, pageHeight - 30, { align: 'right' });
  }

  // Save final PDF
  pdf.save(fileName);
}

export default generatePDF;
