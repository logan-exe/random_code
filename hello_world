import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

/**
 * Attempt direct capture of the element by scrolling it into view.
 */
async function directCapture(el) {
  // Scroll element into view to ensure rendering
  el.scrollIntoView({ behavior: 'auto', block: 'center', inline: 'center' });
  // Give time for lazy content or charts to render
  await new Promise(res => setTimeout(res, 500));
  return await html2canvas(el, {
    backgroundColor: null,
    useCORS: true,
    allowTaint: false,
    scale: 2,
  });
}

/**
 * Fallback: Deep clone the element off-screen for capture.
 */
async function cloneCapture(el) {
  const clone = el.cloneNode(true);
  clone.style.position = 'absolute';
  clone.style.top = '-9999px';
  clone.style.left = '-9999px';
  clone.style.display = 'block';
  clone.style.visibility = 'visible';

  // Copy canvas content
  const origCanvases = el.querySelectorAll('canvas');
  const cloneCanvases = clone.querySelectorAll('canvas');
  cloneCanvases.forEach((c, i) => {
    const o = origCanvases[i];
    try {
      const dataURL = o.toDataURL();
      const img = new Image();
      img.src = dataURL;
      img.onload = () => {
        const ctx = c.getContext('2d');
        ctx.clearRect(0, 0, c.width, c.height);
        ctx.drawImage(img, 0, 0);
      };
    } catch (e) {
      console.warn('Canvas copy failed', e);
    }
  });

  document.body.appendChild(clone);
  try {
    return await html2canvas(clone, {
      backgroundColor: null,
      useCORS: true,
      allowTaint: false,
      windowWidth: clone.scrollWidth,
      windowHeight: clone.scrollHeight,
      scale: 2,
    });
  } finally {
    document.body.removeChild(clone);
  }
}

/**
 * Capture element with direct approach, fallback to clone on failure.
 */
async function captureElement(el) {
  try {
    return await directCapture(el);
  } catch (err) {
    console.warn('Direct capture error, falling back to clone:', err);
    return await cloneCapture(el);
  }
}

/**
 * Generate a professional PDF from specified dashboard tabs, and download each widget as an image.
 *
 * @param {Object} options
 * @param {string} options.title        - Title for the first page.
 * @param {string} options.orientation  - 'portrait' or 'landscape'.
 * @param {Array} options.tabs          - Array of [tabId, { tabTitle, dashboardItems }].
 * @param {string} [options.fileName='document.pdf'] - Output file name.
 */
export async function generatePDF({
  title,
  orientation = 'portrait',
  tabs = [],
  fileName = 'document.pdf',
}) {
  const pdf = new jsPDF({ orientation, unit: 'pt', format: 'a4' });
  const pageW = pdf.internal.pageSize.getWidth();
  const pageH = pdf.internal.pageSize.getHeight();
  const bg = '#262626';
  const fg = '#FFFFFF';

  // Title page
  pdf.setFillColor(bg);
  pdf.rect(0, 0, pageW, pageH, 'F');
  pdf.setTextColor(fg);
  pdf.setFontSize(36);
  pdf.text(title, pageW/2, pageH/2, { align: 'center' });

  // TOC placeholder
  pdf.addPage();
  const toc = [];

  // Process each tab
  for (const [tabId, tabObj] of tabs) {
    const { tabTitle, dashboardItems } = tabObj;
    pdf.addPage();
    const pageStart = pdf.getNumberOfPages();
    toc.push({ title: tabTitle, page: pageStart });

    // Section header
    pdf.setFillColor(bg);
    pdf.rect(0, 0, pageW, pageH, 'F');
    pdf.setTextColor(fg);
    pdf.setFontSize(24);
    pdf.text(tabTitle, 40, 60);
    let y = 90;

    // Render each widget
    for (const item of dashboardItems) {
      const key = item.widgetState?.key;
      const titleTxt = item.widgetState?.title;
      const el = document.getElementById(key);
      if (!el) {
        console.warn(`Missing element: ${key}`);
        continue;
      }

      // Capture to canvas
      const canvas = await captureElement(el);
      const data = canvas.toDataURL('image/png');

      // Download widget image
      const a = document.createElement('a');
      a.href = data;
      a.download = `${key}.png`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);

      // Compute dimensions
      const w = pageW - 80;
      const h = w * canvas.height / canvas.width;

      // Page break
      if (y + h > pageH - 40) {
        pdf.addPage();
        pdf.setFillColor(bg);
        pdf.rect(0, 0, pageW, pageH, 'F');
        y = 60;
      }

      // Widget title
      if (titleTxt) {
        pdf.setFontSize(14);
        pdf.text(titleTxt, 40, y);
        y += 20;
      }
      pdf.addImage(data, 'PNG', 40, y, w, h);
      y += h + 30;
    }
  }

  // Fill TOC
  pdf.setPage(2);
  pdf.setFillColor(bg);
  pdf.rect(0, 0, pageW, pageH, 'F');
  pdf.setTextColor(fg);
  pdf.setFontSize(28);
  pdf.text('Table of Contents', pageW/2, 80, { align: 'center' });
  pdf.setFontSize(14);
  let yT = 120;
  toc.forEach(e => {
    pdf.text(e.title, 60, yT);
    pdf.text(`${e.page}`, pageW-60, yT, { align: 'right' });
    yT += 24;
  });

  // Page numbers
  const total = pdf.getNumberOfPages();
  for (let i = 1; i <= total; i++) {
    pdf.setPage(i);
    if (i > 1) pdf.text(`Page ${i} of ${total}`, pageW-60, pageH-30, { align: 'right' });
  }

  pdf.save(fileName);
}

export default generatePDF;
